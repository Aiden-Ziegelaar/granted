package registry

import (
	"os"

	"github.com/common-fate/clio"
	grantedConfig "github.com/common-fate/granted/pkg/config"
	"github.com/urfave/cli/v2"
)

var SyncCommand = cli.Command{
	Name:        "sync",
	Usage:       "Pull the latest change from remote origin and sync aws profiles in aws config files",
	Description: "Pull the latest change from remote origin and sync aws profiles in aws config files",
	Action: func(c *cli.Context) error {
		if err := SyncProfileRegistries(false); err != nil {
			return err
		}

		return nil
	},
}

// Wrapper around sync func. Check if profile registry is configured, pull the latest changes and call sync func.
func SyncProfileRegistries(shouldSilentLog bool) error {
	gConf, err := grantedConfig.Load()
	if err != nil {
		return err
	}

	if len(gConf.ProfileRegistryURLS) < 1 {
		clio.Warn("granted registry not configured. Try adding a git repository with 'granted registry add <https://github.com/your-org/your-registry.git>'")
	}

	awsConfigPath, err := getDefaultAWSConfigLocation()
	if err != nil {
		return err
	}

	configFile, err := loadAWSConfigFile()
	if err != nil {
		return err
	}

	// if the config file contains granted generated content then remove it
	if err := removeAutogeneratedProfiles(configFile, awsConfigPath); err != nil {
		return err
	}

	for index, repoURL := range gConf.ProfileRegistryURLS {
		u, err := parseGitURL(repoURL)
		if err != nil {
			return err
		}

		repoDirPath, err := getRegistryLocation(u)
		if err != nil {
			return err
		}

		// If the local repo has been deleted, then attempt to clone it again
		_, err = os.Stat(repoDirPath)
		if os.IsNotExist(err) {
			err = gitClone(repoURL, repoDirPath)
			if err != nil {
				return err
			}
		} else {
			err = gitPull(repoDirPath, shouldSilentLog)
			if err != nil {
				return err
			}
		}
		err = parseClonedRepo(repoDirPath, u)
		if err != nil {
			return err
		}

		var r Registry
		_, err = r.Parse(repoDirPath, u)
		if err != nil {
			return err
		}

		isFirstSection := false
		if index == 0 {
			isFirstSection = true
		}

		if err := Sync(r, repoURL, repoDirPath, isFirstSection); err != nil {
			return err
		}
	}

	return nil
}

// Sync function will load all the configs provided in the clonedFile.
// and generated a new section in the ~/.aws/profile file.
func Sync(r Registry, repoURL string, repoDirPath string, isFirstSection bool) error {
	clio.Debugf("syncing %s \n", repoURL)

	awsConfigPath, err := getDefaultAWSConfigLocation()
	if err != nil {
		return err
	}

	awsConfigFile, err := loadAWSConfigFile()
	if err != nil {
		return err
	}

	clonedFile, err := loadClonedConfigs(r, repoDirPath)
	if err != nil {
		return err
	}

	err = generateNewRegistrySection(awsConfigFile, clonedFile, repoURL, isFirstSection)
	if err != nil {
		return err
	}

	err = awsConfigFile.SaveTo(awsConfigPath)
	if err != nil {
		return err
	}

	clio.Successf("Successfully synced registry %s", repoURL)

	return nil
}
