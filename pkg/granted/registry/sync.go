package registry

import (
	"net/url"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/urfave/cli/v2"
)

var SyncCommand = cli.Command{
	Name: "sync",
	Action: func(c *cli.Context) error {
		const REPO_URL = "https://github.com/Eddie023/aws-config-sync-test.git"

		if err := Sync(REPO_URL); err != nil {
			return err
		}

		return nil
	},
}

func Sync(filepath string) error {

	u, err := url.Parse(filepath)
	if err != nil {
		return err
	}

	repoDirPath, err := GetRegistryLocation(u)
	if err != nil {
		return err
	}

	var r Registry
	_, err = r.Parse(repoDirPath)
	if err != nil {
		return err
	}

	// TODO: This logic will be change to replacing content.
	for _, cfile := range r.AwsConfigPaths {
		if strings.HasPrefix(cfile, "./") {
			f, err := os.ReadFile(path.Join(repoDirPath, cfile))
			if err != nil {
				return err
			}

			awsConfigFilePath, err := GetDefaultAWSConfigLocation()
			if err != nil {
				return err
			}

			// TODO: Check if the file exists. Should create file if it doesn't exist.
			awsConfigFile, err := os.OpenFile(awsConfigFilePath, os.O_APPEND|os.O_WRONLY, 0644)
			if err != nil {
				return err
			}
			defer awsConfigFile.Close()

			if _, err := awsConfigFile.WriteString(GetAutogeneratedTemplate(filepath) + "\n"); err != nil {
				return err
			}

			if _, err := awsConfigFile.Write(f); err != nil {
				return err
			}
		}

	}

	return nil

}

// Find the ~/.aws/config absolute path based on OS.
func GetDefaultAWSConfigLocation() (string, error) {
	h, err := os.UserHomeDir()
	if err != nil {
		return "", err
	}

	configPath := filepath.Join(h, ".aws", "config")
	return configPath, nil
}
