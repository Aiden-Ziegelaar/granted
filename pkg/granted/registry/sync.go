package registry

import (
	"fmt"
	"os"

	"github.com/common-fate/clio"
	"github.com/urfave/cli/v2"
	"gopkg.in/ini.v1"
)

var SyncCommand = cli.Command{
	Name:        "sync",
	Usage:       "Pull the latest change from remote origin and sync aws profiles in aws config files",
	Description: "Pull the latest change from remote origin and sync aws profiles in aws config files",
	Action: func(c *cli.Context) error {
		if err := SyncProfileRegistries(false); err != nil {
			return err
		}

		return nil
	},
}

// Wrapper around sync func. Check if profile registry is configured, pull the latest changes and call sync func.
func SyncProfileRegistries(shouldSilentLog bool) error {
	registries, err := GetProfileRegistries()
	if err != nil {
		return err
	}

	if len(registries) == 0 {
		clio.Warn("granted registry not configured. Try adding a git repository with 'granted registry add <https://github.com/your-org/your-registry.git>'")
	}

	configFile, awsConfigPath, err := loadAWSConfigFile()
	if err != nil {
		return err
	}

	// if the config file contains granted generated content then remove it
	if err := removeAutogeneratedProfiles(configFile, awsConfigPath); err != nil {
		return err
	}

	for index, r := range registries {
		repoDirPath, err := getRegistryLocation(r.Config)
		if err != nil {
			return err
		}

		// If the local repo has been deleted, then attempt to clone it again
		_, err = os.Stat(repoDirPath)
		if os.IsNotExist(err) {
			err = gitClone(r.Config.URL, repoDirPath)
			if err != nil {
				return err
			}
		} else {
			err = gitPull(repoDirPath, shouldSilentLog)
			if err != nil {
				return err
			}
		}

		err = r.Parse()
		if err != nil {
			return err
		}

		err = r.PromptRequiredKeys([]string{})
		if err != nil {
			return err
		}

		isFirstSection := false
		if index == 0 {
			isFirstSection = true
		}

		if err := Sync(&r, configFile, isFirstSection); err != nil {
			se, ok := err.(*SyncError)
			if ok {
				clio.Warnf("Sync failed for registry %s", r.Config.Name)
				clio.Debug(se.Error())

				// skip syncing for this registry but continue syncing for other registries.
				continue
			}
			return err
		}

		err = configFile.SaveTo(awsConfigPath)
		if err != nil {
			return err
		}

	}

	return nil
}

// when there is new duplication when running sync command
// and if user choses to duplicate then currenlty the config is not saved to gconfig.

// Sync function will load all the configs provided in the clonedFile.
// and generated a new section in the ~/.aws/profile file.
func Sync(r *Registry, awsConfigFile *ini.File, isFirstSection bool) error {
	clio.Debugf("syncing %s \n", r.Config.Name)

	clonedFile, err := loadClonedConfigs(*r)
	if err != nil {
		return err
	}

	// return custom error that should be catched and skipped.
	err = generateNewRegistrySection(r, awsConfigFile, clonedFile, isFirstSection)
	if err != nil {
		return &SyncError{
			Err:          err,
			RegistryName: r.Config.Name,
		}
	}

	clio.Successf("Successfully synced registry %s", r.Config.Name)

	return nil
}

type SyncError struct {
	Err          error
	RegistryName string
}

func (m *SyncError) Error() string {
	return fmt.Sprintf("Failed to sync for registry %s with error: %s", m.RegistryName, m.Err.Error())
}
