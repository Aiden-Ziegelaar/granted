package registry

import (
	"os"

	"github.com/AlecAivazis/survey/v2"
	"github.com/common-fate/clio"
	grantedConfig "github.com/common-fate/granted/pkg/config"
	"github.com/common-fate/granted/pkg/testable"
	"github.com/urfave/cli/v2"
)

var RemoveCommand = cli.Command{
	Name:        "remove",
	Description: "Unsubscribe from a Profile Registry",
	Usage:       "Unsubscribe from a Profile Registry",

	Action: func(c *cli.Context) error {
		gConf, err := grantedConfig.Load()
		if err != nil {
			return err
		}

		if len(gConf.ProfileRegistry.Registries) == 0 {
			clio.Error("There are no profile registries configured currently.\n Please use 'granted registry add <https://github.com/your-org/your-registry.git>' to add a new registry")
			return nil
		}

		registriesWithNames := []string{}

		for name := range gConf.ProfileRegistry.Registries {
			registriesWithNames = append(registriesWithNames, name)
		}

		in := survey.Select{Message: "Please select the git repository you would like to unsubscribe:", Options: registriesWithNames}
		var out string
		err = testable.AskOne(&in, &out)
		if err != nil {
			return err
		}

		selectedRegistry := gConf.ProfileRegistry.Registries[out]

		r := NewProfileRegistry(registryOptions{
			name: selectedRegistry.Name,
			url:  selectedRegistry.URL,
		})

		repoDir, err := r.getRegistryLocation()
		if err != nil {
			return err
		}

		err = removeAutogeneratedProfileByName(out)
		if err != nil {
			return err
		}

		err = os.RemoveAll(repoDir)
		if err != nil {
			return err
		}

		delete(gConf.ProfileRegistry.Registries, out)
		if err := gConf.Save(); err != nil {
			return err
		}

		clio.Successf("Successfully unsubscribed from %s", out)

		return nil
	},
}
