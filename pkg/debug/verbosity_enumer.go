// Code generated by "enumer -type=Verbosity -linecomment"; DO NOT EDIT.

//
package debug

import (
	"fmt"
)

const _VerbosityName = "INFODEBUG"

var _VerbosityIndex = [...]uint8{0, 4, 9}

func (i Verbosity) String() string {
	if i < 0 || i >= Verbosity(len(_VerbosityIndex)-1) {
		return fmt.Sprintf("Verbosity(%d)", i)
	}
	return _VerbosityName[_VerbosityIndex[i]:_VerbosityIndex[i+1]]
}

var _VerbosityValues = []Verbosity{0, 1}

var _VerbosityNameToValueMap = map[string]Verbosity{
	_VerbosityName[0:4]: 0,
	_VerbosityName[4:9]: 1,
}

// VerbosityString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VerbosityString(s string) (Verbosity, error) {
	if val, ok := _VerbosityNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Verbosity values", s)
}

// VerbosityValues returns all values of the enum
func VerbosityValues() []Verbosity {
	return _VerbosityValues
}

// IsAVerbosity returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Verbosity) IsAVerbosity() bool {
	for _, v := range _VerbosityValues {
		if i == v {
			return true
		}
	}
	return false
}
